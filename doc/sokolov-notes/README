What is Lux?

Lux is an open source XML search engine in the early stage of development,
formed by fusing two excellent widely-adopted open-source technologies: the
Apache Lucene/Solr search index server and the Saxon XQuery processor.

Why another XML search engine?  Many excellent XML search engines (content
stores, database, what have you) already exist.  Every SQL database has
some form of built-in XQuery technology.  There are several excellent open
source offerings, too.  We use these in our development practice.  But a
key requirement for Lux was to provide an XQuery capability on top of an
existing Solr(Lucene) index and document store.  We think this positions it
as an attractive drop-in technology for organizations with an investment in
Lucene looking to add an XQuery search capability.

The story of Lux

I needed a rich scalable open-source XML query capability.  I looked at
some existing technologies, like eXist and baseX, and these are very
appealing.  But I had made a significant technical investment in Lucene and
Saxon and wanted to see how much leverage I could get from "mashup" of my
two favorite systems.  Maybe the whole would be greater.

Lucene provides great scalability, search and even storage, albeit without
full relational database capabilities.  But for document storage, search
and retrieval that's usually fine.  On top of that though the query
language doesn't allow for the detail of xpath or xquery.

Saxon provides high-quality XQuery/XPath evaluation but its indexing
capabilities are transient, designed to support XSLT's key() function, and
really only apply to a single document.

I set out to build some indexes to support a rudimentary query tool,
creating element/attribute name indexes and path indexes and coupled that
with Saxon using an xquery function to run xquery on the query results and
displayed them in a little gui.  This enabled some coarse database
exploration, and was already a huge leap forward from grep.

Lux was born as an independent effort to extrapolate from these modest
beginnings to provide a more robust indexing capability to support XQuery.
I was interested in generating optimized Lucene queries from XQuery
directly without the need to call a special function, so I wrote some code
to do that using first Jaxen and then Saxon's parse trees as input.

Then I began to wonder how to test and improve the basic system that was
beginning to work.  What I was looking for was a collection of queries that
represented common use cases.  If I could optimize those, presumably other
similar queries would see performance gains too.  The difficulty of testing
and improving the performance of expression evaluation is that the number
of possible expressions is truly infinite, and not so easily classified.

I looked at XQTS, but it wasn't really ideal for a couple of reasons: I
wanted to start working only with XPath and work my way up to a more
complete XQuery optimizer, but XQTS really requires XQuery.  Even if I
decided to grapple with that, the XQTS queries are not really designed to
test querying a collection of documents.  They might be bent to that
purpose, but it would take work.

For more information about Lucene and Solr, see http://lucene.apache.org/,
and for more information about The Saxon XSLT and XQuery Processor from
Saxonica Limited, see http://www.saxonica.com/.