3/10; first implementation w/Jaxen and Saxon; used a global optimization,
attempting to generate one single query per expression, and used a special
lucene collector.  Limitations of this became quickly apparent

4/04; developed translator as precursor to generating sub-expression queries
using a function.

4/11; a name-query optimizer beginning to take shape

4/22; optimizer working well, but need for lazy eval becomes apparent

4/23 - 4/25; switch to lazy evaluation

4/25-4/30; tightening up various optimizations

4/31-5/9; path indexing implemented and working

5/10-5/13; solr components working again (broken by switch to lucene pull api); code cleanup

6/3; XQuery 1.0; XQTS 99% passing; API cleanup; Solr field autoconfig;
PubFactory sandbox testing

7/5: value and word indexes

11/19: OK it's been a while since I updated - actually a lot has been done:

query api: lux:search now accepts an xml node-tree as a query.  The intent
is to provide convenience methods for constructing such a tree so that
search can be called from xquery code more easily.

binary storage: I implemented a binary storage format for TinyTree which
allows for faster parsing; 5-20x speedup with a 1.5x size increase (varies,
often less).  TinyBinary is in a branch though, since it relies on a
modification to Saxon and I don't intend to release as part of the open
source package.

iFactory release: I released lux 0.2 to iFactory where it has been used in
a limited way for some data analysis and exploration within the loader
sandbox app.

app server: I implemented a simple app server embedded with solr that
serves up pages written in xquery.

index term retrieval: I added an xquery function lux:fieldTerms that
retrieves terms from the index.

demo: I made a little search demo written in xquery that runs in the app
server and demonstrates auto-completion of node names and term values, and
search.  It sports a sunflwor logo.

11/25

Major code reorganization/renaming of packages etc.  I spent some quality
time w/ Sonar/J and eliminated a lot of cyclical dependencies in an attempt
to make the code cleaner and easier to maintain.

I added the ability to do insert/delete/commit via xquery function calls.

12/1/2012

I implemented searching via collection(), but this doesn't actually enable
any additional optimizations in Saxon PE/EE.  I'll leave the code path in
place for now, just in case some future Saxon release makes this useful.  A
whole day of work wasted on a failed experiment. Poop.

12/8/2012

Made some improvements to the document-order optimization situation in
PE/EE.  Where we can prove that document order is not required we now
generate a flwor expression rather than an xpath, so that we are not
imposing a requirement to sort results in document order.

Sorting!

Implemented xpath indexes, and "order by" optimizations that can use them
via lux:field-values().  Fixed a longstanding bug where we would optimize
too many functions by default: we are now conservative - we don't use a
function's arguments to limit the query unless we can prove that it
preserves sequences.

12/9/2012

Module imports now work, via the filesystem.  Basically we just made sure
that we didn't get in Saxon's way.

UPCOMING

****** package and RELEASE 0.4 to ifactory

12/22/2012

Enhancements to demo: includes content loading

Servlet Filter enables cleaner integration w/Solr

Namespace-aware searching (handle prefix mappings to resolve prefixes in queries)

Relevance ordering!

1/20/2013

Fixed some thread-unsafety issues:
  1) accessing XmlIndexer when performing updates, via lux:insert(), and via
     xsl:result-document().  We now pool and reuse XmlIndexer in XQueryComponent.
  2) accessing DocIDNumberAllocator - we now maintain a docID per thread

Built an app server that runs lux/solr in one context and an app in another context

Optimized function definitions, and collection()/{xpath}

Integrated EXPath package manager; included http and zip modules in app server

More demo enhancement: 
  loads all of shakespeare in parallel from ibiblio over http;
  prettying up the display of speech search results, and scenes

Handle missing DTDs gracefully when loading document with the http module.
This was truly painful - Saxon really doesn't make this easy.

Worked on packaging, documentation (testing fresh install), and logging setup

Enhanced error reporting

New functions: 
  lux:highlight(), 
  lux:log(), 
  file:is-dir(), file:exists(), file:list()
  lux:delete() *deletes all documents*
  
Removed some overly-aggressive optimization of contains().  We now use a wildcard
query for that - not sure if that is a the best performer w/Lucene 3.x, but it will 
be much better w/Lucene 4.X

Added diacritic insensitivity to the built-in (default) analyzer.

Added support for "castable as" and "treat as", and fixed up some messed up type mapping we were doing 

XQTS results: 99.9% (22/17497 fail); some more (61/17498) fail when optimization is on due to the nonstandard way we supply a default context.

03/02/2013

Added low-level support for binary documents; you can now store images,
xquery, and other non-XML files in a Lux index.

Fixed a bug where a document could be stored twice at the same uri.

Index-assisted sorting by numeric fields

Enabled configurable analysis chain so users can control the kind of text
treatment performed by the XML indexing analyzers.  Specifically,
XmlTokenStreamBase now wraps an externally-supplied Analyzer.  We'll need
to follow up by exposing higher-level constructs to make this more usable,
eg: expose via configuration in schema.xml.  This may actually work already
and just require documentation?

Optimized deep pagination: we now skip over (not load into memory and
parse) documents we can prove to be unused.

Fixed an over-optimization bug when we optimized count (exists, not) and
its argument combined a search call and an additional optimizable
expression (like a path).

Solr 4.1 - handled changes in the Lucene (mostly) and Solr API's.  Added
calls to reset() to our custom TokenStreams; adapted to new Term
enumeration API, and to new IndexReader/AtomicReaderContext usage.

Added "querybox" - a query sandbox - to the demo.

03/16/2013

Fixed bug where we dropped the return types of user-defined functions,
 including their cardinalities

Fixed a variable-shadowing bug

Tested with a multi-core Solr install; seems to work OK.
