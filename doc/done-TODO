* optimizations
** basic indexing support: qname retrieval speeds queries when the names are selective
** count() is optimized for a special case:
when the query for the argument can be shown to have the same cardinality;
basically this is when the argument is a simple path expression equivalent
to these forms:

//element/root()
//element/ancestor::document-node()
(/)[.//element]

etc..
*** also in that case, when not counting (just returning documents),
we save some time by not executing the xpath.
** exist(), empty()
short-circuit counting; exits search as soon as a doc is found. not() is
handled as well since saxon converts not(node-sequence) into
not(exists(node-sequence)).
** count(//a) + count(//b)
** lazy result iteration
Rather than trying to figure out in advance how many results will be
required, allow the caller to pull results lazily.  Tested this with exists()
and empty(), and with count() > N.
*** subsequence(); [1], etc.
This sometimes optimizes properly, but not in every case it could.  There
are difficulties because of the need to preserve document ordering.
** document identity
Need to cache documents, at least for the duration of a single query, so we
don't recreate the same document twice: otherwise Saxon thinks they are
different.
** predicate submersion
Express paths returning documents (say ending with root()) as
search()[path] so that the path doesn't need to be sorted in document
order, enabling lazy evaluation.
*** This does seem to have worked
I found this note in impl-TODO, but at the moment we don't seem to have any
problem like this (see SearchTest.pathOrder which retrieves 120 nodes from
6 documents in //SCENE/root()//ACT).  It seems to have gotten sorted out
when we implemented path indexes, although I'm not sure why since we still
emit a purely qname-based query: SCENE AND ACT.

**** removed lux:root()
subsumed by predicate optimization

**** note about root()
Background: the evaluator has to ensure that sequences of nodes are unique
and in document order.  Our Optimizer calculates and asserts document
order, but doesn't detect when there are multiple copies of the same node.
This can occur due to doc() and root().  Maybe other functions?  A sequence
like //foo/root() returns documents, but the evaluator iterates over nodes
(//foo) in each document, and returns each document once for each
occurrence of foo in its document.
* indexes
XmlIndexer manages multiple index options, and we pass it around so consumers
of the index know what is available there.
** qname index
** path index

*** implemented using surround parser / span queries
* tests
** search test coverage
Run search tests for everything in query test, comparing "raw" against
indexed results.
* lux components
** Translator
converts Saxon's internal Expression tree to a Lux AbstractExpression tree.
** PathOptimizer
optimizes an AbstractExpression tree using Lucene searches with element and
attribute name indexes.
*** ExpressionVisitor
machinery for optimizers and other tree visitors like UnOptimizer.
** Indexer
** Lux Function Library for XPath/XQuery 
lux:search, lux:count, lux:exists execute a lucene query, returning
documents, count, and boolean respectively, which are then processed by the
evaluator as part of an enclosing XPath or XQuery expression. Currently
used only internally by the optimizer, but we intend to provide
user-callable versions as well supporting some form of lucene query syntx.
*** optimize absolute (rooted) context-free expressions
The optimizer considers inserting one of the lux function whenever such a
sub-expression occurs.
* packaging
** solr request handler
restored to working order
** MPL license
* code cleanup
** shorten xml index field names?
to make it easier to type queries.  Maybe make the default field name be
something reasonable, like xml_text?  then use lux_att_name, lux_elt_name,
lux_path?  This is fine, but requires schema changes for the Solr version.
* bug fixes
** query quoting
quote operators like and, or, not, n, w.  If we have these as QNames, we'll
fail!  Also - quote quotes, etc.  These could appear in namespace uris, eg.
Maybe we did that part already?
** trailing funcall()
was being treated as root()
